name: CI - Test, Lint, and Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Backend checks
  backend-checks:
    name: Backend Tests & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install backend dependencies
      run: npm ci
    
    - name: Run backend tests
      run: npm test
      env:
        NODE_ENV: test
    
    - name: Check test coverage
      run: npm test -- --coverage --coverageReporters=text-summary || true
      continue-on-error: true
    
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Check for outdated packages
      run: npm outdated || true
      continue-on-error: true

  # Frontend checks
  frontend-checks:
    name: Frontend Tests & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install frontend dependencies
      working-directory: ./chess-analyzer-frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./chess-analyzer-frontend
      run: npm run lint
    
    - name: Build frontend
      working-directory: ./chess-analyzer-frontend
      run: npm run build
      env:
        CI: true
        # These use GitHub secrets if configured, or empty string if not
        # Configure in: Settings -> Secrets and variables -> Actions
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
    
    - name: Check bundle size
      working-directory: ./chess-analyzer-frontend
      run: |
        echo "Frontend build size:"
        du -sh dist/
        find dist -name "*.js" -o -name "*.css" | xargs ls -lh | head -20
    
    - name: Security audit
      working-directory: ./chess-analyzer-frontend
      run: npm audit --audit-level=high
      continue-on-error: true

  # Code quality checks
  code-quality:
    name: Code Quality & Standards
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Check for large files
      run: |
        echo "Checking for large files (>5MB)..."
        find . -type f -size +5M ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./data/*" -exec ls -lh {} \; | head -20
        large_files=$(find . -type f -size +5M ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./data/*" | wc -l)
        if [ "$large_files" -gt 1 ]; then
          echo "Warning: Found $large_files large files (>5MB) outside of data/"
        fi
    
    - name: Check for secrets
      run: |
        echo "Checking for potential secrets..."
        # Check for common secret patterns
        ! grep -r --include="*.js" --include="*.jsx" --include="*.json" --exclude-dir=node_modules \
          -E "(api[_-]?key|secret|token|password|pwd|pass|apikey|auth)" . | \
          grep -v -E "(process\.env|\.example|README|test|mock|dummy|placeholder|your[_-])"
      continue-on-error: true
    
    - name: Check for console.logs in production code
      run: |
        echo "Checking for console.log statements..."
        console_count=$(grep -r "console\." --include="*.js" --include="*.jsx" \
          --exclude-dir=node_modules --exclude-dir=__tests__ \
          ./src ./chess-analyzer-frontend/src 2>/dev/null | wc -l)
        echo "Found $console_count console statements"
        if [ "$console_count" -gt 50 ]; then
          echo "Warning: High number of console statements ($console_count). Consider removing for production."
        fi
      continue-on-error: true
    
    - name: Check for TODO comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        grep -r "TODO\|FIXME\|HACK\|XXX" --include="*.js" --include="*.jsx" \
          --exclude-dir=node_modules . | head -20 || echo "No TODO comments found"
      continue-on-error: true

  # Dependency checks
  dependency-check:
    name: Dependency Security & License Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Check for known vulnerabilities
      run: |
        npx --yes better-npm-audit audit --level=high --production || true
    
    - name: License compatibility check
      run: |
        echo "Checking license compatibility..."
        npx --yes license-checker --production --summary --excludePrivatePackages || true
      continue-on-error: true

  # Docker build check (if applicable)
  docker-check:
    name: Docker Build Verification
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for Dockerfile
      id: check_dockerfile
      run: |
        if [ -f Dockerfile ]; then
          echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Docker Buildx
      if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
      run: |
        docker build . -t chess-analyzer:test --build-arg NODE_ENV=production
    
    - name: Check Docker image size
      if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
      run: |
        docker images chess-analyzer:test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

  # Performance checks
  performance-checks:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Check backend startup time
      run: |
        echo "Measuring backend startup time..."
        npm ci
        start_time=$(date +%s%N)
        timeout 10s npm start &
        sleep 3
        end_time=$(date +%s%N)
        startup_ms=$(((end_time - start_time) / 1000000))
        echo "Backend startup time: ${startup_ms}ms"
        if [ $startup_ms -gt 5000 ]; then
          echo "Warning: Slow startup time (>5s)"
        fi
        pkill -f "node src/server.js" || true
      continue-on-error: true
    
    - name: Memory usage baseline
      run: |
        echo "Checking memory usage patterns..."
        npm ci
        node -e "console.log('Memory usage:', process.memoryUsage())" 
      continue-on-error: true

  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-checks, frontend-checks, code-quality, dependency-check, performance-checks]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## CI Pipeline Summary"
        echo "✅ All checks completed!"
        echo ""
        echo "### Check Results:"
        echo "- Backend Tests: ${{ needs.backend-checks.result }}"
        echo "- Frontend Checks: ${{ needs.frontend-checks.result }}"
        echo "- Code Quality: ${{ needs.code-quality.result }}"
        echo "- Dependency Security: ${{ needs.dependency-check.result }}"
        echo "- Performance Checks: ${{ needs.performance-checks.result }}"
        
        if [ "${{ needs.backend-checks.result }}" != "success" ] || \
           [ "${{ needs.frontend-checks.result }}" != "success" ]; then
          echo ""
          echo "⚠️ Some checks failed. Please review the logs above."
          exit 1
        fi